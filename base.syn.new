goal:
| topStatements
| imports topStatements
;

imports: "import" "{" NEWLINE paths "}" NEWLINE -> ("import" $3)
;

paths: -> ()
| paths path NEWLINE -> $1.$2
;

path: IDENT -> $1:ref / $1
| dottedPath, $1
;

dottedPath: "(" idents ")" -> $2 / $2
;

idents: IDENT -> ($1:ref) / $1
| idents IDENT -> $1.$2:dot / $1->$2
;

topStatements: statement NEWLINE -> ($1)
| topStatements statement NEWLINE -> $1.$2
;

statement: executableStatement
| declaration
;

statementList: "{" NEWLINE statements "}" -> $3:scoped
;

statements: -> ()
| statements statement NEWLINE -> $1.$2
;

executableStatement: assignStatement
| switchStatement
| callStatement
| returnStatement
| deleteStatement
| ifStatement
| whileStatement
;

assignStatement: accessExpr "=" expr -> ("=" $1 $3), $1==$3
;

ifStatement: "if" boolExpr statementList optElse -> ("if" $2 $3 $4), $2==bool
;

optElse:
| "else" statementList -> $2
;

whileStatement: "while" boolExpr optStatementList -> ("while" $2 $3), $2==bool
| "do" statementList "while" boolExpr optStatementList -> ("do" $2 "while" $4 $5), $4=bool
;

optStatementList:
| statementList
;

callStatement: functionCall
;

returnStatement: "return" optExpr -> ("return" $2), ret=$2
;

optExpr:
| expr
;

deleteStatement: "delete" accessExpr -> ("delete" $2) // TODO: check that accessExpr is on heap
;

switchStatement: "switch" arithExpr NEWLINE cases optDefaultCase -> ("switch" $2).$3.$4, $2==int
;

cases: case -> ($1)
| cases case -> $1.$2
;

case: "case" constArithExpr statementList -> ($2 $3), $2==int
;

optDefaultCase:
| "default" statementList -> ("default" $2)
;

declaration: varDecl
| functionDecl
| classDecl
;

varDecl: "var" type IDENT optInitializer -> ("var" $2 $3:def $4), $3=$2, $2==$4
;

varDecl: IDENT ":=" expr -> ("auto" $1:def $3), $1=$3
;

optInitializer:
| "=" expr -> $2 / $2
;

// TODO: support function
functionDecl: "func" type IDENT "(" functionParamDecls ")" statementList
    -> ("func" $2 $3:scoped $5 $7), ret=$2 / ("func" $2 $5)
;

functionParamDecls: -> ()
| type IDENT -> ($1 $2:def), $2=$1
| functionParamDecls "," type IDENT -> $1.$3.$4:def, $4=$3
;

classDecl: "class" IDENT "{" NEWLINE classDeclarations "}" NEWLINE
    -> ("class" $2:scoped).$5, $2=type // TODO: is this right?
;

classDeclarations: -> ()
| classDeclarations declaration NEWLINE -> $1.$2
;

functionCall: accessExpr "(" exprs ")" -> ($1)+$3, $1==("func" $3) / $1.ret
;

exprs: -> () / ()
| expr -> ($1) / ($1)
| exprs "," expr -> $1.$2 / $1.$2
;

type: path / $1
| type "[" optSize "]" -> ("array" $1 $3) / ("array" $1 $3)
;

optSize:
| arithExpr, $1==int / $1 // May need this to be integer value of $1 somehow
;

accessExpr: IDENT -> $1:ref / $1
| accessExpr "[" arithExpr "]" -> ("index" $1 $3), $1[0]=="array", $3==int / $1[1]
| accessExpr "." IDENT -> ("dot" $1 $3:dot) / $1->$3
;

expr: boolOpExpr, $1==bool / bool
| arithExpr / $1
;

boolExpr: boolOpExpr / bool
| accessExpr, $1==bool / bool
| functionCall, $1==bool / bool
;

boolOpExpr: andExpr / bool
| boolOpExpr "||" andExpr -> ("||" $2 $3) / bool
;

andExpr: notExpr, bool
| notExpr "&&" andExpr -> ("&&" $1 $3) / bool
;

notExpr: "!" basicBoolExpr -> ("!" $2) / bool
| relationalExpr / bool
;

basicBoolExpr: accessExpr, $1==bool / bool
| "(" boolExpr ")" -> $2 / bool
;

relationalExpr: arithExpr relationalOp arithExpr -> ($2 $1 $3), $1==$3 / bool
;

relationalOp: "=="
| "!="
| ">"
| "<"
| ">="
| "<="
;

arithExpr: addExpr / $1
| mulExpr "<<" addExpr -> ("<<" $1 $3), $1==int, $3==int / $1
| mulExpr ">>" addExpr -> (">>" $1 $3), $1==int, $3==int / $1
;

addExpr: mulExpr, $1
| addExpr "+" mulExpr -> ("+" $1 $3), $1==num, $1==$3 / $1
| addExpr "-" mulExpr -> ("-" $1 $3), $1==num, $1==$3 / $1
;

mulExpr: bitOrExpr
| mulExpr mulOp bitOrExpr -> ($2 $1 $3), $1==num, $1==$3 / $1
;

mulOp: "*"
| "/"
| "%"
;

bitOrExpr: bitXorExpr, $1
| bitOrExpr "|" bitXorExpr, $1==num, $1==$3 / $1
;

bitXorExpr: bitAndExpr, $1
| bitXorExpr "^" bitAndExpr, $1==num, $1==$3 / $1
;

bitAndExpr: unaryArithExpr
| bitAndExpr "&" unaryArithExpr, $1==num, $1==$3 / $1
;

unaryArithExpr: basicArithExpr
| "-" basicArithExpr -> ("-" $2), $1==num, $2
| "~" basicArithExpr -> ("~" $2), $1==num, $2
;

basicArithExpr: accessExpr, $1
| functionCall, $1
| INTEGER, $1
| FLOAT, $1
| newExpr, $1
| "(" expr ")", $2
;

constArithExpr: path, $1
| INTEGER, $1
;

newExpr: "new" path -> ("new" $2), isType($2), $2
;
