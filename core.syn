goal:
| topStatements
| imports topStatements
;

imports: "(" "import" paths ")" -> ("import" $3)
;

topStatements: statement NEWLINE -> ($1)
| topStatements statement NEWLINE -> $1.$2
;

statement: executableStatement
| declaration
;

statementList: "(" statements ")" -> $2
;

statements: -> ()
| statements statement -> $1.$2
;

executableStatement: assignStatement
| switchStatement
| callStatement
| returnStatement
| deleteStatement
| ifStatement
| whileStatement
;

assignStatement: "(" "=" accessExpr expr ")" -> ("=" $3 $4)
;

ifStatement: "(" "if" boolExpr statementList optStatementList ")" -> ("if" $3 $4 $5)
;

whileStatement: "(" "while" boolExpr optStatementList ")" -> ("while" $3 $4)
| "(" "do" statementList "while" boolExpr optStatementList ")" -> ("do" $3 "while" $5 $6)
;

optStatementList:
| statementList
;

callStatement: functionCall
;

returnStatement: "(" "return" optExpr ")" -> ("return" $3)
;

optExpr:
| expr
;

deleteStatement: "(" "delete" accessExpr ")" -> ("delete" $3)
;

switchStatement: "(" "switch" arithExpr cases optDefaultCase ")" -> ("switch" $3).$4.$5
;

cases: case -> ($1)
| cases case -> $1.$2
;

case: "(" constArithExpr statementList ")" -> ($2 $3)
;

optDefaultCase:
| "(" "default" statementList ")"
;

declarations: -> ()
| declarations declaration -> $1.$2
;

declaration: varDecl
| functionDecl
| classDecl
;

varDecl: "(" "var" type IDENT expr ")" -> ("var" $3 $4 $5)
;

functionDecl: "(" "func" type IDENT "(" functionParamDecls ")" statementList ")" -> ("func" $3 $4 $6 $8)
;

functionParamDecls: -> ()
| functionParamDecls type IDENT -> $1.$2.$3
;

classDecl: "(" "class" declarations ")" -> ("class").$3
;

functionCall: "(" path exprs ")" -> ($2)+$3
;

exprs: -> ()
| exprs expr -> $1.$2
;

type: path
| "(" "array" type optSize ")" -> ("array" $3)
;

optSize:
| INTEGER
;

expr: boolOpExpr
| arithOpExpr
| accessExpr
| functionCall
| newExpr
| INTEGER
| FLOAT
;

accessExpr: path
| "(" "index" accessExpr arithExpr ")" -> ("index" $2 $3)
;

boolExprs: -> ()
| boolExprs boolExpr -> $1.$2
;

boolExpr: boolOpExpr
| accessExpr
| functionCall
;

boolOpExpr: logicalExpr
| relationalExpr
;

logicalExpr: "(" "||" boolExprs ")" -> ("||").$3
| "(" "&&" boolExprs ")" -> ("&&").$3
| "(" "!" boolExpr ")" -> ("!" $3)
;

relationalExpr: "(" "==" expr expr ")" -> ("==" $3 $4)
| "(" "!=" expr expr ")" -> ("!=" $3 $4)
| "(" relationalOp arithExpr arithExpr ")" -> ($2 $3 $4)
;

relationalOp: ">"
| "<"
| ">="
| "<="
;

arithExpr: arithOpExpr
| accessExpr
| functionCall
| INTEGER
| FLOAT
;

arithOpExpr: "(" multiArithOp arithExprs ")" -> ($2).$3
| "(" binaryArithOp arithExpr arithExpr ")" -> ($2 $3 $4)
| "(" unaryArithOp arithExpr ")" -> ($2 $3)
| "(" "-" arithExpr arithExpr ")" -> ("-" $3 $4)
| "(" "-" arithExpr ")" -> ("-" $3)
;

arithExprs: -> ()
| arithExprs arithExpr -> $1.$2
;

multiArithOp: "+"
| "*"
| "&"
| "|"
| "^"
;

binaryArithOp: "/"
| "%"
| "<<"
| ">>"
;

unaryArithOp: "~"
;

constArithExpr: path
| INTEGER
;

newExpr: "(" "new" path ")" -> ("new" $3)
;

paths: -> ()
| paths path -> $1.$2
;

path: IDENT
| "(" "dot" idents ")" -> ("dot").$3
;

idents: -> ()
| idents IDENT -> $1.$2
;
